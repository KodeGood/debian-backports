name: Build & Publish APT packages (bookworm)

on:
  workflow_dispatch:

permissions:
  contents: write   # needed for gh-pages push in publish job

jobs:
  build:
    name: Build ${{ matrix.pkg }} (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- fast-float ---
          - pkg: fast-float
            arch: amd64
            tarball_url: https://github.com/fastfloat/fast_float/archive/refs/tags/v8.0.2.tar.gz
            debian_overlay: fast-float_8.0.2-debian
          - pkg: fast-float
            arch: arm64
            tarball_url: https://github.com/fastfloat/fast_float/archive/refs/tags/v8.0.2.tar.gz
            debian_overlay: fast-float_8.0.2-debian

          # --- libavif ---
          - pkg: libavif
            arch: amd64
            tarball_url: https://github.com/AOMediaCodec/libavif/archive/refs/tags/v1.2.1.tar.gz
            debian_overlay: libavif_1.2.1-debian
          - pkg: libavif
            arch: arm64
            tarball_url: https://github.com/AOMediaCodec/libavif/archive/refs/tags/v1.2.1.tar.gz
            debian_overlay: libavif_1.2.1-debian

          # --- libpng ---
          - pkg: libpng
            arch: amd64
            tarball_url: https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.45.tar.gz
            debian_overlay: libpng1.6_1.6.45-debian
          - pkg: libpng
            arch: arm64
            tarball_url: https://github.com/pnggroup/libpng/archive/refs/tags/v1.6.45.tar.gz
            debian_overlay: libpng1.6_1.6.45-debian

          # --- libtommath ---
          - pkg: libtommath
            arch: amd64
            tarball_url: https://github.com/libtom/libtommath/archive/refs/tags/v1.3.0.tar.gz
            debian_overlay: libtommath_1.3.0-debian
          - pkg: libtommath
            arch: arm64
            tarball_url: https://github.com/libtom/libtommath/archive/refs/tags/v1.3.0.tar.gz
            debian_overlay: libtommath_1.3.0-debian

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download and prepare source tarball (${{ matrix.pkg }})
        env:
          TARBALL_URL: ${{ matrix.tarball_url }}
          DEBIAN_OVERLAY_DIR: ${{ matrix.debian_overlay }}
        run: |
          set -euxo pipefail
          rm -rf src
          mkdir -p src

          # Download
          curl -fsSL "$TARBALL_URL" -o source.tar

          # Try common compressions without relying on file extension
          if tar -tzf source.tar >/dev/null 2>&1; then
            tar xzf source.tar -C src --strip-components=1
          elif tar -tJf source.tar >/dev/null 2>&1; then
            tar xJf source.tar -C src --strip-components=1
          elif tar -tjf source.tar >/dev/null 2>&1; then
            tar xjf source.tar -C src --strip-components=1
          else
            echo "Unsupported tar compression" >&2
            exit 1
          fi

          # Overlay the package-specific debian/ directory
          test -d "$DEBIAN_OVERLAY_DIR" || { echo "Overlay dir '$DEBIAN_OVERLAY_DIR' not found"; exit 1; }
          rsync -a "$DEBIAN_OVERLAY_DIR"/ src/debian/

      - name: Enable QEMU (for arm64)
        uses: docker/setup-qemu-action@v3

      - name: Build inside Debian bookworm (${{ matrix.arch }})
        env:
          ARCH: ${{ matrix.arch }}
          PKG: ${{ matrix.pkg }}
        run: |
          set -euxo pipefail
          docker run --rm --platform=linux/${ARCH} \
            -e DEBIAN_FRONTEND=noninteractive \
            -e ARCH=${ARCH} \
            -e PKG=${PKG} \
            -v "$PWD":/work \
            debian:bookworm bash -lc '
              set -euxo pipefail
              apt-get update
              apt-get -y install --no-install-recommends \
                build-essential devscripts dpkg-dev debhelper equivs fakeroot \
                ca-certificates git rsync curl
              echo "deb-src http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list
              echo "deb http://deb.debian.org/debian bookworm-backports main" >> /etc/apt/sources.list
              echo "deb-src http://deb.debian.org/debian bookworm-backports main" >> /etc/apt/sources.list
              apt-get update

              cd /work/src

              # --- fetch extra sources required by libavif rules ---
              if [ "$PKG" = "libavif" ]; then
                # Clone libargparse into the libavif source root as expected by debian/rules
                if [ ! -d libargparse ]; then
                  git clone --depth=1 https://github.com/kmurray/libargparse.git libargparse
                fi
              fi

              # Install build-deps from debian/control
              mk-build-deps -i -t "apt-get -y --no-install-recommends" -r debian/control

              # CI-friendly: skip tests by default
              export DEB_BUILD_OPTIONS="${DEB_BUILD_OPTIONS:-nocheck}"

              # Build binary packages for this arch
              dpkg-buildpackage -us -uc -b

              mkdir -p /work/out/${PKG}/${ARCH}
              mv /work/*.deb /work/out/${PKG}/${ARCH}/
            '

      - name: Upload binaries (${{ matrix.pkg }} ${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: debs-${{ matrix.pkg }}-${{ matrix.arch }}
          path: out/${{ matrix.pkg }}/${{ matrix.arch }}/*.deb
          if-no-files-found: error

  publish-repo:
    name: Create & deploy APT repo to GitHub Pages
    runs-on: ubuntu-latest
    needs: build
    env:
      DISTRIBUTION: bookworm
      COMPONENT: main
      KEY_ID: ${{ vars.KEY_ID }}
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    steps:
      - name: Checkout default branch (for repo metadata like index.html/CNAME if present)
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro gnupg rsync

      - name: Import GPG key
        run: |
          set -eux
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "$KEY_ID:6:" | gpg --batch --import-ownertrust --pinentry-mode=loopback

      - name: Download all .deb packages
        uses: actions/download-artifact@v4
        with:
          path: ./packages
          merge-multiple: true

      - name: Create/Update APT repository with reprepro
        run: |
          set -eux
          mkdir -p repo/conf
          if [ -f index.html ]; then cp index.html repo/; fi
          if [ -f kodegood-debian-backports.gpg.key ]; then cp kodegood-debian-backports.gpg.key repo/; fi

          cat > repo/conf/distributions <<EOF
          Origin: ${GITHUB_REPOSITORY_OWNER}
          Label: ${GITHUB_REPOSITORY}
          Suite: stable
          Codename: ${DISTRIBUTION}
          Components: ${COMPONENT}
          Architectures: amd64 arm64
          SignWith: ${KEY_ID}
          EOF

          # Include all built packages (all packages, both arches)
          reprepro -Vb repo includedeb "${DISTRIBUTION}" packages/*.deb

      - name: Deploy APT repository to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./repo
          force_orphan: true
          keep_files: false

